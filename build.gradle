buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://repo.spongepowered.org/maven" }
        jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.0.189'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'java'
apply plugin: 'idea'

group = _group
archivesBaseName = _name
version = _version

tasks.withType(JavaCompile).each {
    task ->
        task.options.encoding = 'UTF-8'
        task.sourceCompatibility = task.targetCompatibility = '1.8'
}

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    runs {
        client = server = {
            properties 'forge.logging.console.level': 'info'
            arg "-mixin.config=" + project.archivesBaseName + ".mixins.json"
            arg "--nogui"
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

configurations {
    embed
    compile.extendsFrom(embed)
}

shadowJar {
    configurations = [project.configurations.embed]
    archiveClassifier.set('')
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.4'

    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    embed 'org.springframework:spring-context:5.3.2'
}

mixin {
    add sourceSets.main, project.archivesBaseName + ".refmap.json"
}

reobf {
    shadowJar {
        dependsOn tasks.createMcpToSrg
        mappings = tasks.createMcpToSrg.outputs.files.singleFile
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.archivesBaseName,
                "Specification-Vendor"    : project.archivesBaseName,
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.archivesBaseName,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : project.archivesBaseName,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : project.archivesBaseName + ".mixins.json"
        ])
    }
}

artifacts {
    archives tasks.shadowJar
}